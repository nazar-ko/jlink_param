/* HISTORY

13-Apr-99 klm      $$1  AWT->Swing 1.1, MAJOR cleanup, but it's still a mess

*/

package com.ptc.jlinkdemo.material;

import com.ptc.cipjava.*;
import com.ptc.pfc.pfcGlobal.*;
import com.ptc.pfc.pfcPart.*;
import com.ptc.pfc.pfcSession.*;
import com.ptc.pfc.pfcModelItem.*;
import com.ptc.pfc.pfcModel.*;
import com.ptc.pfc.pfcFeature.*;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.io.*;

import com.ptc.jlinkdemo.common.UIHelper;

public class MaterialSearcher extends JDialog
{
    private Vector      founddata = null;
    private Vector      data = new Vector ();
    private Vector      names = new Vector ();
    private Session     session;

	//{{DECLARE_CONTROLS
	private JComboBox   Prop;
	private JComboBox   Cond;
	private JTextField  Val;
    private JList       resultList;
	private JButton     RSearch;
	private JButton     Display;
	private JButton     Cancel;
	private JButton     NSearch;
	//}}

    public MaterialSearcher (Frame parent, Vector v, Session session)
    {
		super (parent, "Search for Material", true);
        this.session = session;

        fillContent ();
        data = GetAllVal (v);
    }

	private void fillContent ()
	{
        data = new Vector();
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
        JRootPane root = getRootPane ();
        Container content = root.getContentPane ();

        root.setMinimumSize (new Dimension (100, 100));
		root.setPreferredSize (new Dimension (460,390));

        GridBagLayout layout = new GridBagLayout ();
        content.setLayout (layout);
        GridBagConstraints cstr = new GridBagConstraints ();
        cstr.insets = new Insets (5, 5, 0, 5);

        final String [] propNames = {
		    "Young_Modulus", "Poisson_Ratio", "Shear_Modulus", "Mass_Density",
            "Thermal_Expansion_Coefficient", "Therm_Expansion_Ref_Coefficeint",
            "Structural_Damping_Coefficient", "Stress_Limit_For_Tension",
            "Stress_Limit_For_Compression", "Stress_Limit_For_Shear",
            "Thremal_Conductivity", "Emissivity", "Specific_Heat", "Hardness",
            "Initial_Bend_Y_Factor"
        };
		Prop = new JComboBox (propNames);
        Prop.setEditable (false);
        Prop.setSelectedIndex (0);

        final String [] condNames = { ">", "<", "=" };
		Cond = new JComboBox (condNames);
        Cond.setEditable (false);
        Cond.setSelectedIndex (0);

		Val = new JTextField ();

        resultList = new JList ();
        resultList.setBackground (Color.white);
        resultList.getSelectionModel ().setSelectionMode (
            ListSelectionModel.SINGLE_SELECTION);
        JScrollPane resultListPane = new JScrollPane (resultList);

		NSearch = new JButton ("New Search");
		RSearch = new JButton ("Refine Search");
		Display = new JButton ("Display");
		Cancel = new JButton("Close");

        Box condBox = Box.createHorizontalBox ();
        condBox.add (new JLabel ("Condition"));
        condBox.add (Box.createHorizontalStrut (5));
        condBox.add (Prop);
        condBox.add (Box.createHorizontalStrut (5));
        condBox.add (Cond);
        condBox.add (Box.createHorizontalStrut (5));
        condBox.add (Val);
        cstr.gridwidth = GridBagConstraints.REMAINDER;
        cstr.weightx = 1.0;
        cstr.weighty = 0.0;
        cstr.fill = GridBagConstraints.HORIZONTAL;
        layout.setConstraints (condBox, cstr);
        content.add (condBox);

        Box searchBtnBox = Box.createHorizontalBox ();
        searchBtnBox.add (Box.createHorizontalGlue ());
        searchBtnBox.add (NSearch);
        searchBtnBox.add (Box.createHorizontalGlue ());
        searchBtnBox.add (RSearch);
        searchBtnBox.add (Box.createHorizontalGlue ());
        layout.setConstraints (searchBtnBox, cstr);
        content.add (searchBtnBox);

        JSeparator separator = new JSeparator (SwingConstants.HORIZONTAL);
        layout.setConstraints (separator, cstr);
        content.add (separator);

        cstr.weighty = 1.0;
        cstr.fill = GridBagConstraints.BOTH;
        layout.setConstraints (resultListPane, cstr);
        content.add (resultListPane);

        cstr.weighty = 0.0;
        cstr.fill = GridBagConstraints.HORIZONTAL;
        separator = new JSeparator (SwingConstants.HORIZONTAL);
        layout.setConstraints (separator, cstr);
        content.add (separator);

        Box selBtnBox = Box.createHorizontalBox ();
        selBtnBox.add (Box.createHorizontalGlue ());
        selBtnBox.add (Display);
        selBtnBox.add (Box.createHorizontalGlue ());
        selBtnBox.add (Cancel);
        selBtnBox.add (Box.createHorizontalGlue ());
        cstr.insets = new Insets (5, 5, 5, 5);
        layout.setConstraints (selBtnBox, cstr);
        content.add (selBtnBox);

        pack ();
        UIHelper.centerWindow (this);
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		Cancel.addActionListener(lSymAction);
		RSearch.addActionListener(lSymAction);
		Display.addActionListener(lSymAction);
		NSearch.addActionListener(lSymAction);
		//}}
	}

    //searches a vector of material data and displays the names which result
    int Search (java.util.Vector matdata)
    {
	    int x = Prop.getSelectedIndex() + 1;
	    int y = Cond.getSelectedIndex();

	    names = new Vector();
	    Vector results = new Vector ();
        try
        {
            double val = (Double.valueOf(Val.getText())).doubleValue();
            if (matdata != null && matdata.size() != 0)
            {
                int count = 0;
                do
                {
                    //System.out.println("Value : " + val + " ");
                    switch (y)
                    {
                    case 0:
                        if (((Double)((Vector)matdata.elementAt(count))
                             .elementAt(x)).doubleValue() > val)
                        {
                            names.addElement((String)((Vector)matdata
                                             .elementAt(count)).elementAt(0));
                            results.addElement(matdata.elementAt(count));
                            //printMsg("CASE1");

                        }
                        break;
                    case 1:
                        if (((Double)((Vector)matdata.elementAt(count))
                             .elementAt(x)).doubleValue() < val)
                        {
                            results.addElement(matdata.elementAt(count));
                            names.addElement(((Vector)matdata
                                              .elementAt(count)).elementAt(0));
                            //printMsg("Case2");
                        }
                        break;
                    case 2:
                        if (((Double)((Vector)matdata.elementAt(count))
                             .elementAt(x)).doubleValue() == val)
                        {
                            results.addElement(matdata.elementAt(count));
                            names.addElement(((Vector)matdata
                                              .elementAt(count)).elementAt(0));
                            //printMsg("Case3");
                        }
                        break;

                    }
                    //System.out.println("GOT " + count);
                    count++;
                }
                while (count < matdata.size());
                //System.out.println("Okay got through the while loop");

                founddata = results;

                resultList.setListData (names);
            }
        }
        catch (NumberFormatException e)
        {
            UIHelper.showErrorMessage (this, "invalid value", "condition");
        }

        return (names.size());
    }

	private static Vector GetAllVal (Vector start)
	{
        Vector temp = new Vector();
        Vector temp2 = new Vector();
        int count = 0;
        String str = "";
        do {
            str = (String)(((Vector)start.elementAt(count)).elementAt(0));
            temp.addElement(str);

            BufferedReader in;
            try
            {
                in = new BufferedReader(new FileReader(str + ".mat"));
            }
            catch (FileNotFoundException x)
            {
                continue;
            }

            try
            {
                String s;

                while ((s = in.readLine ()) != null)
                {
                    if (s.indexOf("YOUNG_MODULUS") != -1 ||
                        s.indexOf("POISSON_RATIO") != -1 ||
                        s.indexOf("SHEAR_MODULUS") != -1 ||
                        s.indexOf("MASS_DENSITY") != -1 ||
                        s.indexOf("THERMAL_EXPANSION_COEFFICIENT") != -1 ||
                        s.indexOf("THERM_EXPANSION_REF_TEMPERATURE") != -1 ||
                        s.indexOf("STRUCTURAL_DAMPING_COEFFICIENT") != -1 ||
                        s.indexOf("STRESS_LIMIT_FOR_TENSION") != -1 ||
                        s.indexOf("STRESS_LIMIT_FOR_COMPRESSION") != -1 ||
                        s.indexOf("STRESS_LIMIT_FOR_SHEAR") != -1 ||
                        s.indexOf("THERMAL_CONDUCTIVITY") != -1 ||
                        s.indexOf("EMISSIVITY") != -1 ||
                        s.indexOf("SPECIFIC_HEAT") != -1 ||
                        s.indexOf("HARDNESS") != -1 ||
                        s.indexOf("INITIAL_BEND_Y_FACTOR") != -1)
                    {
                        temp.addElement(Double.valueOf(
                             s.substring (s.indexOf ("=")+1, s.length ())));
                    }
                    else if (
                        s.indexOf("CONDITION") != -1 ||
                        s.indexOf("BEND_TABLE") != -1)
                    {
                        temp.addElement(s.substring (s.indexOf ("=")+1,
                                                     s.length()));
                    }
                }
                in.close ();
                temp2.addElement(temp);
                temp = new Vector();
                count++;
            }
            catch (IOException x)
	        {
                printMsg ("exception reading " + str + ".mat:\n" + x);  
                x.printStackTrace ();
                continue;
	        }
            catch (NumberFormatException x)
	        {
                printMsg ("exception reading " + str + ".mat:\n" + x);  
                x.printStackTrace ();
                continue;
	        }
        }
        while (count < start.size());

        return temp2;
    }

    //=========================================================================
	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
            setVisible(false);
            dispose();
		}
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object source = event.getSource();
		    if (source == NSearch)
		        NSearch_ActionPerformed(event);
			else if (source == RSearch)
				RSearch_ActionPerformed(event);
			else if (source == Display)
				Display_ActionPerformed(event);
			else if (source == Cancel)
				Cancel_ActionPerformed(event);
		}
	}

    //executes new search using entire set of material data
    void NSearch_ActionPerformed (java.awt.event.ActionEvent event)
    {
        Search (data);
    }

    //executes refined search using previously selected vector
	void RSearch_ActionPerformed(java.awt.event.ActionEvent event)
	{
        Search (founddata);
	}

	void Display_ActionPerformed(java.awt.event.ActionEvent event)
	{
        String selMatName = (String) resultList.getSelectedValue ();
	    if (selMatName != null)
	    {
            SelectBox.showMaterialFile ((Frame) getParent (), selMatName);
	    }
	}

	void Cancel_ActionPerformed(java.awt.event.ActionEvent event)
	{
		setVisible(false);
		dispose();
 	}

    //=========================================================================
    private static void printMsg (String msg)
    {
        System.out.println ("MaterialSearcher: " + msg);
    }
}
